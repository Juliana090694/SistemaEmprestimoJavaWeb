<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"> 
  <!-- Aqui estão os hibernate mapping, que pegam o que tem nos models e traduz para comandos 
SQL através da bruxaria chamada hibernate. No caso desse programa foi tudo feito a mão 
mesmo porque assim aprende bem mais e fica mais organizado e completo

Todo <Classe>.hml.xml Possuem suas "<property>" que tem o "name"(nome da variável),
o "column(coluna do banco de dados) e o type(tipo) que é o que define o que é aquela variável
algumas classes tem relações de chaves estrangeiras por one-to-many que não estou afim 
de explicar pois é 4:30 da manhã mas em resumo transforma classes em id's para relacionar 
com o banco nos dois sentidos-->
 <hibernate-mapping>  
  <class name="com.livros.model.Emprestimo" table="Emprestimo">  
    <id name="id" type="int" column="id" >
         <generator class="increment"/>
      </id>
            
    <property name="quantidade" column="Quantidade" type="integer"/> 
    <property name="data_retirada" column="Data_retirada" type="date"/>
    <property name="data_devolucao" column="Data_devolucao" type="date"/>
    
    <many-to-one name="livro" class="com.livros.model.Livro" fetch="select">
    	<column name="Livro" />
    </many-to-one>
        
    <many-to-one name="cliente" class="com.livros.model.Cliente" fetch="select">
    	<column name="Cliente" />
    </many-to-one>
    
    <property name="descricao" column="Descricao" type="string"/> 
    
    <!-- <property name="livro" column="Livro" type="com.livros.model.Livro"/>
    <property name="cliente" column="Cliente" type="com.livros.model.Cliente"/> -->
            
  </class>  
            
 </hibernate-mapping>  